{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Use a standard terminal emulator as a 3270 terminal interface. Write scripts to automate 3270 terminal interaction. This is both a 3270 terminal emulator and a Python libary. The zti module provides a 3270 user interface through a Windows Command Prompt or a unix/ascii terminal. The tnz module handles the interface to the 3270 data stream. The ati module allows for easier 3270 terminal automation. Features \u00a7 Runs on many platforms (including z/OS) Secure telnet (TLS) by default Manages multiple 3270 sessions at the same time Lightweight - does not duplicate standard terminal function Code page 310 for APL graphic symbols (i.e. 3278T terminal type) Installing \u00a7 Python 3.6 or later is required. Although not required, on platforms other than z/OS, it is suggested you also install the ebcdic package from PyPI. Use pip to install the latest tnz: pip3 install ebcdic tnz Usage \u00a7 Automation \u00a7 See examples to get started writing a script to automate 3270 interaction. Emulator \u00a7 Run the installed zti (Z Terminal Interface) script to start the emulator: zti If your path is not set up for running the installed zti console script, you can run zti with python -m tnz.zti instead. Starting zti takes you into the zti command line interface shell. Key tab for command completion, up/down for command history. The goto command takes you to a full screen 3270 interface. When space is available in the terminal screen/window, a status line is provided as well as a session selector. The basic syntax of goto is: goto fully-qualified-host-name[:port] In Windows, the Lucida Console font works well with graphic character APL symbols exploited by ISPF. Large and arbitrarily-sized screens are supported. Standard unix/ascii terminals are supported. In the screenshot below, PuTTY is used as the terminal emulator. The connection was made from PuTTY to z/OS via ssh and zti is running on z/OS. The code in this repository aims to be portable. To achieve this, the number of dependencies is kept to a minimum. The only hard requirement across platforms is Python and the Python Standard Library. Though it is likely you will also want additional ebcdic code pages in order to use your code page of choice (i.e. the ebcdic package). Emulator Features \u00a7 Use Alt+letter to access ISPF menus Mouse click sets cursor position Mouse double-click sets cursor position and send Enter Use any EBCDIC code page available to Python Use of code page 310 for APL graphic symbols Paste multiline block of text Running zti on Windows \u00a7 The trapping of the keyboard disables keyboard shortcuts documented in the Control-menu->Edit menu. But the functions can still be accessed through the Control-menu. For example: mouse click top-left corner, E (Edit), F (Find) to find text. To copy text in Command Prompt, make sure that the Quick Edit Mode option is selected in the Properties accessed through the Control-menu. Then you can hold Shift while using the mouse to select text. Once the text is selected, press Enter to copy the text. There are other ways to select text, but I this to be the easiest. Do NOT use Control-menu->Edit->Paste to paste text (unless the text in the clipboard has ONLY printable characters - no line breaks). Instead, use Shift+Insert to paste . Before establishing a session, get the window sized the way you want it. Window resizing is not handled well in Windows. If you do resize, just use Esc to get to the command prompt then goto to get back to the session. Control-menu->Properties will take you to properties for the terminal. The character size and font can be set. I recommend Lucida Console - it is readable and the graphic symbols are fairly good at connecting like they are supposed to. Documentation \u00a7 For additional details, see docstrings in source code. Contributing \u00a7 See CONTRIBUTING.md . Acknowledgments \u00a7 Hats off to the team responsible for the IBM internal Automated Task Interpreter (ATI) tool: Richard Lynch, Karen Eickemeyer, and Ronald Barber.","title":"Introduction"},{"location":"#features","text":"Runs on many platforms (including z/OS) Secure telnet (TLS) by default Manages multiple 3270 sessions at the same time Lightweight - does not duplicate standard terminal function Code page 310 for APL graphic symbols (i.e. 3278T terminal type)","title":"Features"},{"location":"#installing","text":"Python 3.6 or later is required. Although not required, on platforms other than z/OS, it is suggested you also install the ebcdic package from PyPI. Use pip to install the latest tnz: pip3 install ebcdic tnz","title":"Installing"},{"location":"#usage","text":"","title":"Usage"},{"location":"#automation","text":"See examples to get started writing a script to automate 3270 interaction.","title":"Automation"},{"location":"#emulator","text":"Run the installed zti (Z Terminal Interface) script to start the emulator: zti If your path is not set up for running the installed zti console script, you can run zti with python -m tnz.zti instead. Starting zti takes you into the zti command line interface shell. Key tab for command completion, up/down for command history. The goto command takes you to a full screen 3270 interface. When space is available in the terminal screen/window, a status line is provided as well as a session selector. The basic syntax of goto is: goto fully-qualified-host-name[:port] In Windows, the Lucida Console font works well with graphic character APL symbols exploited by ISPF. Large and arbitrarily-sized screens are supported. Standard unix/ascii terminals are supported. In the screenshot below, PuTTY is used as the terminal emulator. The connection was made from PuTTY to z/OS via ssh and zti is running on z/OS. The code in this repository aims to be portable. To achieve this, the number of dependencies is kept to a minimum. The only hard requirement across platforms is Python and the Python Standard Library. Though it is likely you will also want additional ebcdic code pages in order to use your code page of choice (i.e. the ebcdic package).","title":"Emulator"},{"location":"#emulator-features","text":"Use Alt+letter to access ISPF menus Mouse click sets cursor position Mouse double-click sets cursor position and send Enter Use any EBCDIC code page available to Python Use of code page 310 for APL graphic symbols Paste multiline block of text","title":"Emulator Features"},{"location":"#running-zti-on-windows","text":"The trapping of the keyboard disables keyboard shortcuts documented in the Control-menu->Edit menu. But the functions can still be accessed through the Control-menu. For example: mouse click top-left corner, E (Edit), F (Find) to find text. To copy text in Command Prompt, make sure that the Quick Edit Mode option is selected in the Properties accessed through the Control-menu. Then you can hold Shift while using the mouse to select text. Once the text is selected, press Enter to copy the text. There are other ways to select text, but I this to be the easiest. Do NOT use Control-menu->Edit->Paste to paste text (unless the text in the clipboard has ONLY printable characters - no line breaks). Instead, use Shift+Insert to paste . Before establishing a session, get the window sized the way you want it. Window resizing is not handled well in Windows. If you do resize, just use Esc to get to the command prompt then goto to get back to the session. Control-menu->Properties will take you to properties for the terminal. The character size and font can be set. I recommend Lucida Console - it is readable and the graphic symbols are fairly good at connecting like they are supposed to.","title":"Running zti on Windows"},{"location":"#documentation","text":"For additional details, see docstrings in source code.","title":"Documentation"},{"location":"#contributing","text":"See CONTRIBUTING.md .","title":"Contributing"},{"location":"#acknowledgments","text":"Hats off to the team responsible for the IBM internal Automated Task Interpreter (ATI) tool: Richard Lynch, Karen Eickemeyer, and Ronald Barber.","title":"Acknowledgments"},{"location":"colors/","text":"By default, tnz will emulate a 3270 terminal that has 8 colors and zti will assume a host terminal capable of true color is being used and use a tnz-defined color palette to display those 8 terminal colors. If you do not want (or cannot use, in the case of Terminal.app ) this default color behavior, you can use the TNZ_COLORS environment variable. Use export TNZ_COLORS=256 to direct zti to use the 256-color palette instead of true color. Set to an integer less than 16 and zti will assume only the standard ansi colors can be used (for example export TNZ_COLORS=8 ). This can be helpful if your terminal doesn't support true color or if you want to change the colors to your liking - terminal emulators typically allow you to set the ansi colors. Set to an integer less than 8 and tnz will emulate a 3270 terminal that has no color capability and zti will not use any color capability. The following table describes, for each color mode, the host terminal colors used for the 8 different 3270 colors. If different colors are desired, check the zti-hosting terminal for the capability to change the color palette. You may need to use TNZ_COLORS=8 to get zti to use the customized color palette. The actual terminal 8-bit color palette may not match the table above. It is common for terminal emulators to customize the palette.","title":"Colors"},{"location":"screen-sizing/","text":"Typical desktop applications can be resized. And resizing does not typically change the scale of the content (i.e. the font size) - it changes the amount of viewable content. In the world of terminals, this means a change in the number of character rows and columns. Even though it is common for modern applications to handle window resizing, it is not common for legacy 3270 applications to handle terminal resizing. The tnz library helps with this dilemma by keeping the 3270 terminal size constant for a connected session even when the host acii terminal size may be changing. But this does not help when reconnecting sessions. One thing that may help keep the 3270 terminal size constant in reconnect scenarios is allowing tnz to select the terminal size for you. It will select from a relatively small set of standard terminal sizes the largest size that fits on the host terminal. So, for small changes to the terminal size, the largest standard size will tend to not change. SESSION_PS_SIZE \u00a7 To help with reconnect scenarios, or to just request a specific size, set the SESSION_PS_SIZE environment variable to the desired size (for example export SESSION_PS_SIZE=43x80 for 43 rows by 80 columns). When using ati.py or in zti you can also use the SESSION_PS_SIZE ATI-like variable in the same way (for example set SESSION_PS_SIZE 62x160 ). In addition to taking the default largest standard terminal size that fits and specifying a specific size, there are some special values that you can set the SESSION_PS_SIZE environment variable to that zti will use to determine the 3270 terminal size: MAX fill host terminal but leave space for header/footer and session selector (column max of 160 ) MAX255 fill host terminal but leave space for header/footer and session selector (column max of 255 ) FULL fill host terminal (column max of 160 ) FULL255 fill host terminal (column max of 255 ) Autosize \u00a7 IBM Personal Communications has a feature that will scale the font so that the 3270 terminal area takes up all of the window area. This behavior can also be simulated using tnz in PuTTY: Set your font size and window size the way you like it for your shell. In zti, you can use the size command to get the current number of rows and columns of your terminal. Use PuTTY Change Settings. Choose the Window category. Set the size of the window to your current rows and columns and for \"When window is resize\", choose \"Change the size of the font\". Apply those changes. Enter autosize in zti to turn on the tnz feature. When using goto , zti will use the shell terminal size as your preferred scale . It will then use the terminal capability to set the size of the terminal. In this case, not only will the rows and columns change, but the font will change in order to keep all terminal characters in your window - as opposed to the normal setting that would cause a change to the size of the window instead of the size of the font. But, unlike PCOMM, it may not fill the whole window in order to respect your preferred scale .","title":"Screen Sizing"},{"location":"screen-sizing/#session_ps_size","text":"To help with reconnect scenarios, or to just request a specific size, set the SESSION_PS_SIZE environment variable to the desired size (for example export SESSION_PS_SIZE=43x80 for 43 rows by 80 columns). When using ati.py or in zti you can also use the SESSION_PS_SIZE ATI-like variable in the same way (for example set SESSION_PS_SIZE 62x160 ). In addition to taking the default largest standard terminal size that fits and specifying a specific size, there are some special values that you can set the SESSION_PS_SIZE environment variable to that zti will use to determine the 3270 terminal size: MAX fill host terminal but leave space for header/footer and session selector (column max of 160 ) MAX255 fill host terminal but leave space for header/footer and session selector (column max of 255 ) FULL fill host terminal (column max of 160 ) FULL255 fill host terminal (column max of 255 )","title":"SESSION_PS_SIZE"},{"location":"screen-sizing/#autosize","text":"IBM Personal Communications has a feature that will scale the font so that the 3270 terminal area takes up all of the window area. This behavior can also be simulated using tnz in PuTTY: Set your font size and window size the way you like it for your shell. In zti, you can use the size command to get the current number of rows and columns of your terminal. Use PuTTY Change Settings. Choose the Window category. Set the size of the window to your current rows and columns and for \"When window is resize\", choose \"Change the size of the font\". Apply those changes. Enter autosize in zti to turn on the tnz feature. When using goto , zti will use the shell terminal size as your preferred scale . It will then use the terminal capability to set the size of the terminal. In this case, not only will the rows and columns change, but the font will change in order to keep all terminal characters in your window - as opposed to the normal setting that would cause a change to the size of the window instead of the size of the font. But, unlike PCOMM, it may not fill the whole window in order to respect your preferred scale .","title":"Autosize"},{"location":"security/","text":"Python 3.10 is aggressive in causing failures for algorithms/options that are not secure enough. If you receive an SSL-related message, there is a good chance of a security weakness in the host/server. The best course of action is to request that the server be updated to support security best practices in terms of supported encryption algorithms and key sizes. The other option is to try to use the \"less secure\" way that the server is \"forcing\". If this is a problem with the changes in Python 3.10, doing export ZTI_SECLEVEL=1 (or SET ZTI_SECLEVEL=1 in Windows) before starting zti should accept the \"less secure\" option by downgrading the level from 2 to 1. Port Defaults \u00a7 If SESSION_SSL=0 is used, default port is 992 If SESSION_SSL=1 is used, default port is 23.","title":"Security"},{"location":"security/#port-defaults","text":"If SESSION_SSL=0 is used, default port is 992 If SESSION_SSL=1 is used, default port is 23.","title":"Port Defaults"}]}